"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

function indexOf(haystack, needle) {
    if (!haystack) {
        return -1;
    }var i = 0;
    var length = haystack.length;
    var idx = -1;
    var found = false;

    while (i < length && !found) {
        if (haystack[i] === needle) {
            idx = i;
            found = true;
        }

        i++;
    }

    return idx;
};

var EventEmitter = (function () {
    function EventEmitter() {
        _classCallCheck(this, EventEmitter);

        this.__events = {};
    }

    _createClass(EventEmitter, {
        on: {
            value: function on(event, listener) {
                if (typeof this.__events[event] !== "object") {
                    this.__events[event] = [];
                }

                this.__events[event].push(listener);
            }
        },
        removeListener: {
            value: function removeListener(event, listener) {
                var idx;

                if (typeof this.__events[event] === "object") {
                    idx = indexOf(this.__events[event], listener);

                    if (idx > -1) {
                        this.__events[event].splice(idx, 1);
                    }
                }
            }
        },
        emit: {
            value: function emit(event) {
                var i,
                    listeners,
                    length,
                    args = [].slice.call(arguments, 1);

                if (typeof this.__events[event] === "object") {
                    listeners = this.__events[event].slice();
                    length = listeners.length;

                    for (i = 0; i < length; i++) {
                        listeners[i].apply(this, args);
                    }
                }
            }
        }
    });

    return EventEmitter;
})();

module.exports = EventEmitter;