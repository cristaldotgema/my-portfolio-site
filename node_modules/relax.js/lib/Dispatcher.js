"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var constants = require("./constants");
var FBDispatcher = require("flux").Dispatcher;
var Store = require("./Store");

var Dispatcher = (function (_FBDispatcher) {
    function Dispatcher() {
        _classCallCheck(this, Dispatcher);

        if (_FBDispatcher != null) {
            _FBDispatcher.apply(this, arguments);
        }
    }

    _inherits(Dispatcher, _FBDispatcher);

    _createClass(Dispatcher, {
        handleViewAction: {
            value: function handleViewAction(action) {
                this.dispatch({
                    source: constants.VIEW_ACTION,
                    action: action
                });
            }
        },
        handleServerAction: {
            value: function handleServerAction(action) {
                this.dispatch({
                    source: constants.SERVER_ACTION,
                    action: action
                });
            }
        },
        handlePlatformAction: {
            value: function handlePlatformAction(action) {
                this.dispatch({
                    source: constants.PLATFORM_ACTION,
                    action: action
                });
            }
        },
        handleServiceAction: {
            value: function handleServiceAction(action) {
                this.dispatch({
                    source: constants.SERVICE_ACTION,
                    action: action
                });
            }
        },
        subscribe: {
            value: function subscribe(store, actions) {
                if (Object.keys(actions).length === 0) throw "You have to provide store for subscription";

                store.__dispatcherIndex = this.register(function (payload) {
                    var action = payload.action;

                    for (var actionType in actions) {
                        if (actionType !== action.actionType) continue;
                        var isDataChanged = actions[actionType](action.data, payload.source);
                        if (isDataChanged) store.emitChange();
                    }
                });
            }
        },
        unsubscribe: {
            value: function unsubscribe(store) {
                this.unregister(store.__dispatcherIndex);
            }
        },
        await: {
            value: function await(stores) {
                var ids = stores.map(function (store) {
                    return store.__dispatcherIndex;
                });
                this.waitFor(ids);
            }
        }
    });

    return Dispatcher;
})(FBDispatcher);

module.exports = Dispatcher;